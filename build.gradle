import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    id "com.gradleup.shadow" version "8.3.0"
}

group = 'com.gmail.necnionch.myplugin.raidspawner'
version = '1.0.0'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }

    // LandsAPI, Vault
    maven { url 'https://jitpack.io' }

    // MythicMobs
    maven { url 'https://mvn.lumine.io/repository/maven-public/' }

    // PlaceholderAPI
    maven { url 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
}

dependencies {
    implementation "org.spigotmc:spigot-api:1.14.4-R0.1-SNAPSHOT"
    implementation "com.github.angeschossen:LandsAPI:7.10.13"
    implementation 'io.lumine:Mythic-Dist:5.6.1'
    implementation "net.objecthunter:exp4j:0.4.8"
    implementation "com.github.MilkBowl:VaultAPI:1.7"
    implementation 'me.clip:placeholderapi:2.11.6'
}

tasks.named("shadowJar", ShadowJar) {
    archiveClassifier.set("")
    dependencies {
        include(dependency("net.objecthunter:exp4j:0.4.8"))
        exclude "/META-INF/**"
    }
    relocate "net.objecthunter.exp4j", "${project.group}.libs.exp4j"
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
